// Protobuf interface of the lens service.
//
// Copyright (c) 2022 Wibowo Arindrarto <contact@arindrarto.dev>
// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: lens.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Lens_AddFeed_FullMethodName     = "/lens.Lens/AddFeed"
	Lens_EditFeeds_FullMethodName   = "/lens.Lens/EditFeeds"
	Lens_ListFeeds_FullMethodName   = "/lens.Lens/ListFeeds"
	Lens_PullFeeds_FullMethodName   = "/lens.Lens/PullFeeds"
	Lens_DeleteFeeds_FullMethodName = "/lens.Lens/DeleteFeeds"
	Lens_ListEntries_FullMethodName = "/lens.Lens/ListEntries"
	Lens_EditEntries_FullMethodName = "/lens.Lens/EditEntries"
	Lens_GetEntry_FullMethodName    = "/lens.Lens/GetEntry"
	Lens_ExportOPML_FullMethodName  = "/lens.Lens/ExportOPML"
	Lens_ImportOPML_FullMethodName  = "/lens.Lens/ImportOPML"
	Lens_GetStats_FullMethodName    = "/lens.Lens/GetStats"
	Lens_GetInfo_FullMethodName     = "/lens.Lens/GetInfo"
)

// LensClient is the client API for Lens service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LensClient interface {
	// AddFeeds adds a new feed source.
	AddFeed(ctx context.Context, in *AddFeedRequest, opts ...grpc.CallOption) (*AddFeedResponse, error)
	// EditFeeds sets one or more fields of feeds.
	EditFeeds(ctx context.Context, in *EditFeedsRequest, opts ...grpc.CallOption) (*EditFeedsResponse, error)
	// ListFeeds lists all added feed sources.
	ListFeeds(ctx context.Context, in *ListFeedsRequest, opts ...grpc.CallOption) (*ListFeedsResponse, error)
	// PullFeeds checks feeds for updates and returns all unread entries.
	PullFeeds(ctx context.Context, in *PullFeedsRequest, opts ...grpc.CallOption) (Lens_PullFeedsClient, error)
	// DeleteFeeds removes one or more feed sources.
	DeleteFeeds(ctx context.Context, in *DeleteFeedsRequest, opts ...grpc.CallOption) (*DeleteFeedsResponse, error)
	// ListEntries lists entries of a specific feed.
	ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error)
	// EditEntries sets one or more fields of an entry.
	EditEntries(ctx context.Context, in *EditEntriesRequest, opts ...grpc.CallOption) (*EditEntriesResponse, error)
	// GetEntry returns the content of an entry.
	GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error)
	// ExportOPML exports feed subscriptions as an OPML document.
	ExportOPML(ctx context.Context, in *ExportOPMLRequest, opts ...grpc.CallOption) (*ExportOPMLResponse, error)
	// ImportOPML imports an OPML document.
	ImportOPML(ctx context.Context, in *ImportOPMLRequest, opts ...grpc.CallOption) (*ImportOPMLResponse, error)
	// GetStats returns various statistics of the feed subscriptions.
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	// GetInfo returns the version info of the running server.
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
}

type lensClient struct {
	cc grpc.ClientConnInterface
}

func NewLensClient(cc grpc.ClientConnInterface) LensClient {
	return &lensClient{cc}
}

func (c *lensClient) AddFeed(ctx context.Context, in *AddFeedRequest, opts ...grpc.CallOption) (*AddFeedResponse, error) {
	out := new(AddFeedResponse)
	err := c.cc.Invoke(ctx, Lens_AddFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lensClient) EditFeeds(ctx context.Context, in *EditFeedsRequest, opts ...grpc.CallOption) (*EditFeedsResponse, error) {
	out := new(EditFeedsResponse)
	err := c.cc.Invoke(ctx, Lens_EditFeeds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lensClient) ListFeeds(ctx context.Context, in *ListFeedsRequest, opts ...grpc.CallOption) (*ListFeedsResponse, error) {
	out := new(ListFeedsResponse)
	err := c.cc.Invoke(ctx, Lens_ListFeeds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lensClient) PullFeeds(ctx context.Context, in *PullFeedsRequest, opts ...grpc.CallOption) (Lens_PullFeedsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Lens_ServiceDesc.Streams[0], Lens_PullFeeds_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lensPullFeedsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lens_PullFeedsClient interface {
	Recv() (*PullFeedsResponse, error)
	grpc.ClientStream
}

type lensPullFeedsClient struct {
	grpc.ClientStream
}

func (x *lensPullFeedsClient) Recv() (*PullFeedsResponse, error) {
	m := new(PullFeedsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lensClient) DeleteFeeds(ctx context.Context, in *DeleteFeedsRequest, opts ...grpc.CallOption) (*DeleteFeedsResponse, error) {
	out := new(DeleteFeedsResponse)
	err := c.cc.Invoke(ctx, Lens_DeleteFeeds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lensClient) ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error) {
	out := new(ListEntriesResponse)
	err := c.cc.Invoke(ctx, Lens_ListEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lensClient) EditEntries(ctx context.Context, in *EditEntriesRequest, opts ...grpc.CallOption) (*EditEntriesResponse, error) {
	out := new(EditEntriesResponse)
	err := c.cc.Invoke(ctx, Lens_EditEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lensClient) GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error) {
	out := new(GetEntryResponse)
	err := c.cc.Invoke(ctx, Lens_GetEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lensClient) ExportOPML(ctx context.Context, in *ExportOPMLRequest, opts ...grpc.CallOption) (*ExportOPMLResponse, error) {
	out := new(ExportOPMLResponse)
	err := c.cc.Invoke(ctx, Lens_ExportOPML_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lensClient) ImportOPML(ctx context.Context, in *ImportOPMLRequest, opts ...grpc.CallOption) (*ImportOPMLResponse, error) {
	out := new(ImportOPMLResponse)
	err := c.cc.Invoke(ctx, Lens_ImportOPML_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lensClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, Lens_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lensClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, Lens_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LensServer is the server API for Lens service.
// All implementations must embed UnimplementedLensServer
// for forward compatibility
type LensServer interface {
	// AddFeeds adds a new feed source.
	AddFeed(context.Context, *AddFeedRequest) (*AddFeedResponse, error)
	// EditFeeds sets one or more fields of feeds.
	EditFeeds(context.Context, *EditFeedsRequest) (*EditFeedsResponse, error)
	// ListFeeds lists all added feed sources.
	ListFeeds(context.Context, *ListFeedsRequest) (*ListFeedsResponse, error)
	// PullFeeds checks feeds for updates and returns all unread entries.
	PullFeeds(*PullFeedsRequest, Lens_PullFeedsServer) error
	// DeleteFeeds removes one or more feed sources.
	DeleteFeeds(context.Context, *DeleteFeedsRequest) (*DeleteFeedsResponse, error)
	// ListEntries lists entries of a specific feed.
	ListEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error)
	// EditEntries sets one or more fields of an entry.
	EditEntries(context.Context, *EditEntriesRequest) (*EditEntriesResponse, error)
	// GetEntry returns the content of an entry.
	GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error)
	// ExportOPML exports feed subscriptions as an OPML document.
	ExportOPML(context.Context, *ExportOPMLRequest) (*ExportOPMLResponse, error)
	// ImportOPML imports an OPML document.
	ImportOPML(context.Context, *ImportOPMLRequest) (*ImportOPMLResponse, error)
	// GetStats returns various statistics of the feed subscriptions.
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	// GetInfo returns the version info of the running server.
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	mustEmbedUnimplementedLensServer()
}

// UnimplementedLensServer must be embedded to have forward compatible implementations.
type UnimplementedLensServer struct {
}

func (UnimplementedLensServer) AddFeed(context.Context, *AddFeedRequest) (*AddFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeed not implemented")
}
func (UnimplementedLensServer) EditFeeds(context.Context, *EditFeedsRequest) (*EditFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFeeds not implemented")
}
func (UnimplementedLensServer) ListFeeds(context.Context, *ListFeedsRequest) (*ListFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeeds not implemented")
}
func (UnimplementedLensServer) PullFeeds(*PullFeedsRequest, Lens_PullFeedsServer) error {
	return status.Errorf(codes.Unimplemented, "method PullFeeds not implemented")
}
func (UnimplementedLensServer) DeleteFeeds(context.Context, *DeleteFeedsRequest) (*DeleteFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeeds not implemented")
}
func (UnimplementedLensServer) ListEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntries not implemented")
}
func (UnimplementedLensServer) EditEntries(context.Context, *EditEntriesRequest) (*EditEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEntries not implemented")
}
func (UnimplementedLensServer) GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntry not implemented")
}
func (UnimplementedLensServer) ExportOPML(context.Context, *ExportOPMLRequest) (*ExportOPMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportOPML not implemented")
}
func (UnimplementedLensServer) ImportOPML(context.Context, *ImportOPMLRequest) (*ImportOPMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportOPML not implemented")
}
func (UnimplementedLensServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedLensServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedLensServer) mustEmbedUnimplementedLensServer() {}

// UnsafeLensServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LensServer will
// result in compilation errors.
type UnsafeLensServer interface {
	mustEmbedUnimplementedLensServer()
}

func RegisterLensServer(s grpc.ServiceRegistrar, srv LensServer) {
	s.RegisterService(&Lens_ServiceDesc, srv)
}

func _Lens_AddFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LensServer).AddFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lens_AddFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LensServer).AddFeed(ctx, req.(*AddFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lens_EditFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LensServer).EditFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lens_EditFeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LensServer).EditFeeds(ctx, req.(*EditFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lens_ListFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LensServer).ListFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lens_ListFeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LensServer).ListFeeds(ctx, req.(*ListFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lens_PullFeeds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullFeedsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LensServer).PullFeeds(m, &lensPullFeedsServer{stream})
}

type Lens_PullFeedsServer interface {
	Send(*PullFeedsResponse) error
	grpc.ServerStream
}

type lensPullFeedsServer struct {
	grpc.ServerStream
}

func (x *lensPullFeedsServer) Send(m *PullFeedsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Lens_DeleteFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LensServer).DeleteFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lens_DeleteFeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LensServer).DeleteFeeds(ctx, req.(*DeleteFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lens_ListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LensServer).ListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lens_ListEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LensServer).ListEntries(ctx, req.(*ListEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lens_EditEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LensServer).EditEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lens_EditEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LensServer).EditEntries(ctx, req.(*EditEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lens_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LensServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lens_GetEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LensServer).GetEntry(ctx, req.(*GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lens_ExportOPML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportOPMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LensServer).ExportOPML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lens_ExportOPML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LensServer).ExportOPML(ctx, req.(*ExportOPMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lens_ImportOPML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOPMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LensServer).ImportOPML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lens_ImportOPML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LensServer).ImportOPML(ctx, req.(*ImportOPMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lens_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LensServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lens_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LensServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lens_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LensServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lens_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LensServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lens_ServiceDesc is the grpc.ServiceDesc for Lens service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lens_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lens.Lens",
	HandlerType: (*LensServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFeed",
			Handler:    _Lens_AddFeed_Handler,
		},
		{
			MethodName: "EditFeeds",
			Handler:    _Lens_EditFeeds_Handler,
		},
		{
			MethodName: "ListFeeds",
			Handler:    _Lens_ListFeeds_Handler,
		},
		{
			MethodName: "DeleteFeeds",
			Handler:    _Lens_DeleteFeeds_Handler,
		},
		{
			MethodName: "ListEntries",
			Handler:    _Lens_ListEntries_Handler,
		},
		{
			MethodName: "EditEntries",
			Handler:    _Lens_EditEntries_Handler,
		},
		{
			MethodName: "GetEntry",
			Handler:    _Lens_GetEntry_Handler,
		},
		{
			MethodName: "ExportOPML",
			Handler:    _Lens_ExportOPML_Handler,
		},
		{
			MethodName: "ImportOPML",
			Handler:    _Lens_ImportOPML_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Lens_GetStats_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Lens_GetInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullFeeds",
			Handler:       _Lens_PullFeeds_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lens.proto",
}
