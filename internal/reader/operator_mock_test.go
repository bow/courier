// Code generated by MockGen. DO NOT EDIT.
// Source: internal/reader/ui/operator.go
//
// Generated by this command:
//
//	mockgen -source=internal/reader/ui/operator.go -package=reader Operator
//

// Package reader is a generated GoMock package.
package reader

import (
	reflect "reflect"

	backend "github.com/bow/neon/internal/reader/backend"
	ui "github.com/bow/neon/internal/reader/ui"
	gomock "go.uber.org/mock/gomock"
)

// MockOperator is a mock of Operator interface.
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorMockRecorder
}

// MockOperatorMockRecorder is the mock recorder for MockOperator.
type MockOperatorMockRecorder struct {
	mock *MockOperator
}

// NewMockOperator creates a new mock instance.
func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &MockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperator) EXPECT() *MockOperatorMockRecorder {
	return m.recorder
}

// ClearStatusBar mocks base method.
func (m *MockOperator) ClearStatusBar(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearStatusBar", d)
}

// ClearStatusBar indicates an expected call of ClearStatusBar.
func (mr *MockOperatorMockRecorder) ClearStatusBar(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearStatusBar", reflect.TypeOf((*MockOperator)(nil).ClearStatusBar), d)
}

// FocusEntriesPane mocks base method.
func (m *MockOperator) FocusEntriesPane(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusEntriesPane", d)
}

// FocusEntriesPane indicates an expected call of FocusEntriesPane.
func (mr *MockOperatorMockRecorder) FocusEntriesPane(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusEntriesPane", reflect.TypeOf((*MockOperator)(nil).FocusEntriesPane), d)
}

// FocusFeedsPane mocks base method.
func (m *MockOperator) FocusFeedsPane(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusFeedsPane", d)
}

// FocusFeedsPane indicates an expected call of FocusFeedsPane.
func (mr *MockOperatorMockRecorder) FocusFeedsPane(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusFeedsPane", reflect.TypeOf((*MockOperator)(nil).FocusFeedsPane), d)
}

// FocusNextPane mocks base method.
func (m *MockOperator) FocusNextPane(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusNextPane", d)
}

// FocusNextPane indicates an expected call of FocusNextPane.
func (mr *MockOperatorMockRecorder) FocusNextPane(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusNextPane", reflect.TypeOf((*MockOperator)(nil).FocusNextPane), d)
}

// FocusPreviousPane mocks base method.
func (m *MockOperator) FocusPreviousPane(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusPreviousPane", d)
}

// FocusPreviousPane indicates an expected call of FocusPreviousPane.
func (mr *MockOperatorMockRecorder) FocusPreviousPane(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusPreviousPane", reflect.TypeOf((*MockOperator)(nil).FocusPreviousPane), d)
}

// FocusReadingPane mocks base method.
func (m *MockOperator) FocusReadingPane(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusReadingPane", d)
}

// FocusReadingPane indicates an expected call of FocusReadingPane.
func (mr *MockOperatorMockRecorder) FocusReadingPane(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusReadingPane", reflect.TypeOf((*MockOperator)(nil).FocusReadingPane), d)
}

// ShowAllFeeds mocks base method.
func (m *MockOperator) ShowAllFeeds(d *ui.Display, b backend.Backend) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowAllFeeds", d, b)
}

// ShowAllFeeds indicates an expected call of ShowAllFeeds.
func (mr *MockOperatorMockRecorder) ShowAllFeeds(d, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAllFeeds", reflect.TypeOf((*MockOperator)(nil).ShowAllFeeds), d, b)
}

// ShowIntroPopup mocks base method.
func (m *MockOperator) ShowIntroPopup(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowIntroPopup", d)
}

// ShowIntroPopup indicates an expected call of ShowIntroPopup.
func (mr *MockOperatorMockRecorder) ShowIntroPopup(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowIntroPopup", reflect.TypeOf((*MockOperator)(nil).ShowIntroPopup), d)
}

// ToggleAboutPopup mocks base method.
func (m *MockOperator) ToggleAboutPopup(d *ui.Display, b backend.Backend) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleAboutPopup", d, b)
}

// ToggleAboutPopup indicates an expected call of ToggleAboutPopup.
func (mr *MockOperatorMockRecorder) ToggleAboutPopup(d, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleAboutPopup", reflect.TypeOf((*MockOperator)(nil).ToggleAboutPopup), d, b)
}

// ToggleHelpPopup mocks base method.
func (m *MockOperator) ToggleHelpPopup(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleHelpPopup", d)
}

// ToggleHelpPopup indicates an expected call of ToggleHelpPopup.
func (mr *MockOperatorMockRecorder) ToggleHelpPopup(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleHelpPopup", reflect.TypeOf((*MockOperator)(nil).ToggleHelpPopup), d)
}

// ToggleStatsPopup mocks base method.
func (m *MockOperator) ToggleStatsPopup(d *ui.Display, b backend.Backend) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleStatsPopup", d, b)
}

// ToggleStatsPopup indicates an expected call of ToggleStatsPopup.
func (mr *MockOperatorMockRecorder) ToggleStatsPopup(d, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleStatsPopup", reflect.TypeOf((*MockOperator)(nil).ToggleStatsPopup), d, b)
}

// ToggleStatusBar mocks base method.
func (m *MockOperator) ToggleStatusBar(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleStatusBar", d)
}

// ToggleStatusBar indicates an expected call of ToggleStatusBar.
func (mr *MockOperatorMockRecorder) ToggleStatusBar(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleStatusBar", reflect.TypeOf((*MockOperator)(nil).ToggleStatusBar), d)
}

// UnfocusFront mocks base method.
func (m *MockOperator) UnfocusFront(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnfocusFront", d)
}

// UnfocusFront indicates an expected call of UnfocusFront.
func (mr *MockOperatorMockRecorder) UnfocusFront(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfocusFront", reflect.TypeOf((*MockOperator)(nil).UnfocusFront), d)
}
