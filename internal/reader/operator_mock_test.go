// Code generated by MockGen. DO NOT EDIT.
// Source: internal/reader/ui/operator.go
//
// Generated by this command:
//
//	mockgen -source=internal/reader/ui/operator.go -package=reader Operator
//

// Package reader is a generated GoMock package.
package reader

import (
	reflect "reflect"

	repo "github.com/bow/neon/internal/reader/repo"
	ui "github.com/bow/neon/internal/reader/ui"
	gomock "go.uber.org/mock/gomock"
)

// MockOperator is a mock of Operator interface.
type MockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorMockRecorder
}

// MockOperatorMockRecorder is the mock recorder for MockOperator.
type MockOperatorMockRecorder struct {
	mock *MockOperator
}

// NewMockOperator creates a new mock instance.
func NewMockOperator(ctrl *gomock.Controller) *MockOperator {
	mock := &MockOperator{ctrl: ctrl}
	mock.recorder = &MockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperator) EXPECT() *MockOperatorMockRecorder {
	return m.recorder
}

// ClearStatusBar mocks base method.
func (m *MockOperator) ClearStatusBar(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearStatusBar", d)
}

// ClearStatusBar indicates an expected call of ClearStatusBar.
func (mr *MockOperatorMockRecorder) ClearStatusBar(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearStatusBar", reflect.TypeOf((*MockOperator)(nil).ClearStatusBar), d)
}

// FocusEntriesPane mocks base method.
func (m *MockOperator) FocusEntriesPane(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusEntriesPane", d)
}

// FocusEntriesPane indicates an expected call of FocusEntriesPane.
func (mr *MockOperatorMockRecorder) FocusEntriesPane(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusEntriesPane", reflect.TypeOf((*MockOperator)(nil).FocusEntriesPane), d)
}

// FocusFeedsPane mocks base method.
func (m *MockOperator) FocusFeedsPane(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusFeedsPane", d)
}

// FocusFeedsPane indicates an expected call of FocusFeedsPane.
func (mr *MockOperatorMockRecorder) FocusFeedsPane(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusFeedsPane", reflect.TypeOf((*MockOperator)(nil).FocusFeedsPane), d)
}

// FocusNextPane mocks base method.
func (m *MockOperator) FocusNextPane(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusNextPane", d)
}

// FocusNextPane indicates an expected call of FocusNextPane.
func (mr *MockOperatorMockRecorder) FocusNextPane(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusNextPane", reflect.TypeOf((*MockOperator)(nil).FocusNextPane), d)
}

// FocusPreviousPane mocks base method.
func (m *MockOperator) FocusPreviousPane(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusPreviousPane", d)
}

// FocusPreviousPane indicates an expected call of FocusPreviousPane.
func (mr *MockOperatorMockRecorder) FocusPreviousPane(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusPreviousPane", reflect.TypeOf((*MockOperator)(nil).FocusPreviousPane), d)
}

// FocusReadingPane mocks base method.
func (m *MockOperator) FocusReadingPane(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusReadingPane", d)
}

// FocusReadingPane indicates an expected call of FocusReadingPane.
func (mr *MockOperatorMockRecorder) FocusReadingPane(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusReadingPane", reflect.TypeOf((*MockOperator)(nil).FocusReadingPane), d)
}

// HideIntroPopup mocks base method.
func (m *MockOperator) HideIntroPopup(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HideIntroPopup", d)
}

// HideIntroPopup indicates an expected call of HideIntroPopup.
func (mr *MockOperatorMockRecorder) HideIntroPopup(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HideIntroPopup", reflect.TypeOf((*MockOperator)(nil).HideIntroPopup), d)
}

// NotifyErr mocks base method.
func (m *MockOperator) NotifyErr(d *ui.Display, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyErr", d, err)
}

// NotifyErr indicates an expected call of NotifyErr.
func (mr *MockOperatorMockRecorder) NotifyErr(d, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyErr", reflect.TypeOf((*MockOperator)(nil).NotifyErr), d, err)
}

// NotifyErrf mocks base method.
func (m *MockOperator) NotifyErrf(d *ui.Display, text string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{d, text}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "NotifyErrf", varargs...)
}

// NotifyErrf indicates an expected call of NotifyErrf.
func (mr *MockOperatorMockRecorder) NotifyErrf(d, text any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{d, text}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyErrf", reflect.TypeOf((*MockOperator)(nil).NotifyErrf), varargs...)
}

// NotifyInfof mocks base method.
func (m *MockOperator) NotifyInfof(d *ui.Display, text string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{d, text}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "NotifyInfof", varargs...)
}

// NotifyInfof indicates an expected call of NotifyInfof.
func (mr *MockOperatorMockRecorder) NotifyInfof(d, text any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{d, text}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyInfof", reflect.TypeOf((*MockOperator)(nil).NotifyInfof), varargs...)
}

// NotifyWarnf mocks base method.
func (m *MockOperator) NotifyWarnf(d *ui.Display, text string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{d, text}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "NotifyWarnf", varargs...)
}

// NotifyWarnf indicates an expected call of NotifyWarnf.
func (mr *MockOperatorMockRecorder) NotifyWarnf(d, text any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{d, text}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyWarnf", reflect.TypeOf((*MockOperator)(nil).NotifyWarnf), varargs...)
}

// ToggleAboutPopup mocks base method.
func (m *MockOperator) ToggleAboutPopup(d *ui.Display, r repo.Repo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleAboutPopup", d, r)
}

// ToggleAboutPopup indicates an expected call of ToggleAboutPopup.
func (mr *MockOperatorMockRecorder) ToggleAboutPopup(d, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleAboutPopup", reflect.TypeOf((*MockOperator)(nil).ToggleAboutPopup), d, r)
}

// ToggleFeedsInPane mocks base method.
func (m *MockOperator) ToggleFeedsInPane(d *ui.Display, r repo.Repo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleFeedsInPane", d, r)
}

// ToggleFeedsInPane indicates an expected call of ToggleFeedsInPane.
func (mr *MockOperatorMockRecorder) ToggleFeedsInPane(d, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleFeedsInPane", reflect.TypeOf((*MockOperator)(nil).ToggleFeedsInPane), d, r)
}

// ToggleHelpPopup mocks base method.
func (m *MockOperator) ToggleHelpPopup(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleHelpPopup", d)
}

// ToggleHelpPopup indicates an expected call of ToggleHelpPopup.
func (mr *MockOperatorMockRecorder) ToggleHelpPopup(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleHelpPopup", reflect.TypeOf((*MockOperator)(nil).ToggleHelpPopup), d)
}

// ToggleIntroPopup mocks base method.
func (m *MockOperator) ToggleIntroPopup(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleIntroPopup", d)
}

// ToggleIntroPopup indicates an expected call of ToggleIntroPopup.
func (mr *MockOperatorMockRecorder) ToggleIntroPopup(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleIntroPopup", reflect.TypeOf((*MockOperator)(nil).ToggleIntroPopup), d)
}

// ToggleStatsPopup mocks base method.
func (m *MockOperator) ToggleStatsPopup(d *ui.Display, r repo.Repo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleStatsPopup", d, r)
}

// ToggleStatsPopup indicates an expected call of ToggleStatsPopup.
func (mr *MockOperatorMockRecorder) ToggleStatsPopup(d, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleStatsPopup", reflect.TypeOf((*MockOperator)(nil).ToggleStatsPopup), d, r)
}

// ToggleStatusBar mocks base method.
func (m *MockOperator) ToggleStatusBar(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleStatusBar", d)
}

// ToggleStatusBar indicates an expected call of ToggleStatusBar.
func (mr *MockOperatorMockRecorder) ToggleStatusBar(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleStatusBar", reflect.TypeOf((*MockOperator)(nil).ToggleStatusBar), d)
}

// UnfocusFront mocks base method.
func (m *MockOperator) UnfocusFront(d *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnfocusFront", d)
}

// UnfocusFront indicates an expected call of UnfocusFront.
func (mr *MockOperatorMockRecorder) UnfocusFront(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfocusFront", reflect.TypeOf((*MockOperator)(nil).UnfocusFront), d)
}
