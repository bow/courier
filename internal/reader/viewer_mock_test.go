// Code generated by MockGen. DO NOT EDIT.
// Source: internal/reader/ui/view.go
//
// Generated by this command:
//
//	mockgen -source=internal/reader/ui/view.go -package=reader Viewer
//

// Package reader is a generated GoMock package.
package reader

import (
	reflect "reflect"

	entity "github.com/bow/neon/internal/entity"
	ui "github.com/bow/neon/internal/reader/ui"
	gomock "go.uber.org/mock/gomock"
)

// MockViewer is a mock of Viewer interface.
type MockViewer struct {
	ctrl     *gomock.Controller
	recorder *MockViewerMockRecorder
}

// MockViewerMockRecorder is the mock recorder for MockViewer.
type MockViewerMockRecorder struct {
	mock *MockViewer
}

// NewMockViewer creates a new mock instance.
func NewMockViewer(ctrl *gomock.Controller) *MockViewer {
	mock := &MockViewer{ctrl: ctrl}
	mock.recorder = &MockViewerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViewer) EXPECT() *MockViewerMockRecorder {
	return m.recorder
}

// ClearStatusBar mocks base method.
func (m *MockViewer) ClearStatusBar(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearStatusBar", arg0)
}

// ClearStatusBar indicates an expected call of ClearStatusBar.
func (mr *MockViewerMockRecorder) ClearStatusBar(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearStatusBar", reflect.TypeOf((*MockViewer)(nil).ClearStatusBar), arg0)
}

// FocusEntriesPane mocks base method.
func (m *MockViewer) FocusEntriesPane(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusEntriesPane", arg0)
}

// FocusEntriesPane indicates an expected call of FocusEntriesPane.
func (mr *MockViewerMockRecorder) FocusEntriesPane(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusEntriesPane", reflect.TypeOf((*MockViewer)(nil).FocusEntriesPane), arg0)
}

// FocusFeedsPane mocks base method.
func (m *MockViewer) FocusFeedsPane(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusFeedsPane", arg0)
}

// FocusFeedsPane indicates an expected call of FocusFeedsPane.
func (mr *MockViewerMockRecorder) FocusFeedsPane(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusFeedsPane", reflect.TypeOf((*MockViewer)(nil).FocusFeedsPane), arg0)
}

// FocusNextPane mocks base method.
func (m *MockViewer) FocusNextPane(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusNextPane", arg0)
}

// FocusNextPane indicates an expected call of FocusNextPane.
func (mr *MockViewerMockRecorder) FocusNextPane(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusNextPane", reflect.TypeOf((*MockViewer)(nil).FocusNextPane), arg0)
}

// FocusPreviousPane mocks base method.
func (m *MockViewer) FocusPreviousPane(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusPreviousPane", arg0)
}

// FocusPreviousPane indicates an expected call of FocusPreviousPane.
func (mr *MockViewerMockRecorder) FocusPreviousPane(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusPreviousPane", reflect.TypeOf((*MockViewer)(nil).FocusPreviousPane), arg0)
}

// FocusReadingPane mocks base method.
func (m *MockViewer) FocusReadingPane(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FocusReadingPane", arg0)
}

// FocusReadingPane indicates an expected call of FocusReadingPane.
func (mr *MockViewerMockRecorder) FocusReadingPane(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FocusReadingPane", reflect.TypeOf((*MockViewer)(nil).FocusReadingPane), arg0)
}

// HideIntroPopup mocks base method.
func (m *MockViewer) HideIntroPopup(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HideIntroPopup", arg0)
}

// HideIntroPopup indicates an expected call of HideIntroPopup.
func (mr *MockViewerMockRecorder) HideIntroPopup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HideIntroPopup", reflect.TypeOf((*MockViewer)(nil).HideIntroPopup), arg0)
}

// NotifyErr mocks base method.
func (m *MockViewer) NotifyErr(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyErr", err)
}

// NotifyErr indicates an expected call of NotifyErr.
func (mr *MockViewerMockRecorder) NotifyErr(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyErr", reflect.TypeOf((*MockViewer)(nil).NotifyErr), err)
}

// NotifyErrf mocks base method.
func (m *MockViewer) NotifyErrf(text string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{text}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "NotifyErrf", varargs...)
}

// NotifyErrf indicates an expected call of NotifyErrf.
func (mr *MockViewerMockRecorder) NotifyErrf(text any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{text}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyErrf", reflect.TypeOf((*MockViewer)(nil).NotifyErrf), varargs...)
}

// NotifyInfof mocks base method.
func (m *MockViewer) NotifyInfof(text string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{text}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "NotifyInfof", varargs...)
}

// NotifyInfof indicates an expected call of NotifyInfof.
func (mr *MockViewerMockRecorder) NotifyInfof(text any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{text}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyInfof", reflect.TypeOf((*MockViewer)(nil).NotifyInfof), varargs...)
}

// NotifyWarnf mocks base method.
func (m *MockViewer) NotifyWarnf(text string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{text}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "NotifyWarnf", varargs...)
}

// NotifyWarnf indicates an expected call of NotifyWarnf.
func (mr *MockViewerMockRecorder) NotifyWarnf(text any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{text}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyWarnf", reflect.TypeOf((*MockViewer)(nil).NotifyWarnf), varargs...)
}

// ToggleAboutPopup mocks base method.
func (m *MockViewer) ToggleAboutPopup(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleAboutPopup", arg0)
}

// ToggleAboutPopup indicates an expected call of ToggleAboutPopup.
func (mr *MockViewerMockRecorder) ToggleAboutPopup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleAboutPopup", reflect.TypeOf((*MockViewer)(nil).ToggleAboutPopup), arg0)
}

// ToggleFeedsInPane mocks base method.
func (m *MockViewer) ToggleFeedsInPane(arg0 *ui.Display, arg1 <-chan *entity.Feed) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleFeedsInPane", arg0, arg1)
}

// ToggleFeedsInPane indicates an expected call of ToggleFeedsInPane.
func (mr *MockViewerMockRecorder) ToggleFeedsInPane(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleFeedsInPane", reflect.TypeOf((*MockViewer)(nil).ToggleFeedsInPane), arg0, arg1)
}

// ToggleHelpPopup mocks base method.
func (m *MockViewer) ToggleHelpPopup(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleHelpPopup", arg0)
}

// ToggleHelpPopup indicates an expected call of ToggleHelpPopup.
func (mr *MockViewerMockRecorder) ToggleHelpPopup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleHelpPopup", reflect.TypeOf((*MockViewer)(nil).ToggleHelpPopup), arg0)
}

// ToggleIntroPopup mocks base method.
func (m *MockViewer) ToggleIntroPopup(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleIntroPopup", arg0)
}

// ToggleIntroPopup indicates an expected call of ToggleIntroPopup.
func (mr *MockViewerMockRecorder) ToggleIntroPopup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleIntroPopup", reflect.TypeOf((*MockViewer)(nil).ToggleIntroPopup), arg0)
}

// ToggleStatsPopup mocks base method.
func (m *MockViewer) ToggleStatsPopup(arg0 *ui.Display, arg1 <-chan *entity.Stats) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleStatsPopup", arg0, arg1)
}

// ToggleStatsPopup indicates an expected call of ToggleStatsPopup.
func (mr *MockViewerMockRecorder) ToggleStatsPopup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleStatsPopup", reflect.TypeOf((*MockViewer)(nil).ToggleStatsPopup), arg0, arg1)
}

// ToggleStatusBar mocks base method.
func (m *MockViewer) ToggleStatusBar(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleStatusBar", arg0)
}

// ToggleStatusBar indicates an expected call of ToggleStatusBar.
func (mr *MockViewerMockRecorder) ToggleStatusBar(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleStatusBar", reflect.TypeOf((*MockViewer)(nil).ToggleStatusBar), arg0)
}

// UnfocusPane mocks base method.
func (m *MockViewer) UnfocusPane(arg0 *ui.Display) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnfocusPane", arg0)
}

// UnfocusPane indicates an expected call of UnfocusPane.
func (mr *MockViewerMockRecorder) UnfocusPane(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfocusPane", reflect.TypeOf((*MockViewer)(nil).UnfocusPane), arg0)
}
