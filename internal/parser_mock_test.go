// Code generated by MockGen. DO NOT EDIT.
// Source: internal/parser.go

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gofeed "github.com/mmcdole/gofeed"
)

// MockFeedParser is a mock of FeedParser interface.
type MockFeedParser struct {
	ctrl     *gomock.Controller
	recorder *MockFeedParserMockRecorder
}

// MockFeedParserMockRecorder is the mock recorder for MockFeedParser.
type MockFeedParserMockRecorder struct {
	mock *MockFeedParser
}

// NewMockFeedParser creates a new mock instance.
func NewMockFeedParser(ctrl *gomock.Controller) *MockFeedParser {
	mock := &MockFeedParser{ctrl: ctrl}
	mock.recorder = &MockFeedParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedParser) EXPECT() *MockFeedParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockFeedParser) Parse(arg0 io.Reader) (*gofeed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0)
	ret0, _ := ret[0].(*gofeed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockFeedParserMockRecorder) Parse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockFeedParser)(nil).Parse), arg0)
}

// ParseURL mocks base method.
func (m *MockFeedParser) ParseURL(arg0 string) (*gofeed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseURL", arg0)
	ret0, _ := ret[0].(*gofeed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseURL indicates an expected call of ParseURL.
func (mr *MockFeedParserMockRecorder) ParseURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseURL", reflect.TypeOf((*MockFeedParser)(nil).ParseURL), arg0)
}

// ParseURLWithContext mocks base method.
func (m *MockFeedParser) ParseURLWithContext(feedURL string, ctx context.Context) (*gofeed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseURLWithContext", feedURL, ctx)
	ret0, _ := ret[0].(*gofeed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseURLWithContext indicates an expected call of ParseURLWithContext.
func (mr *MockFeedParserMockRecorder) ParseURLWithContext(feedURL, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseURLWithContext", reflect.TypeOf((*MockFeedParser)(nil).ParseURLWithContext), feedURL, ctx)
}
